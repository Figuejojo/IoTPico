# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "Develop", "CI"]
  pull_request:
    branches: [ "Develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt update;
        sudo apt-get install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential;
        sudo apt install pkg-config libusb-1.0-0-dev;

    - name: Get-Sub-repos
      run: |
        cd pico-sdk;
        git checkout 2.0.0;
        cd ..;
        git submodule update --init --remote --recursive;

    - name: PicoTool
      run: |
        git clone https://github.com/raspberrypi/picotool.git;
        ls;
        export PICO_SDK_PATH="$PWD/pico-sdk";
        echo $PICO_SDK_PATH
        export PICO_TOOLCHAIN_PATH="$PWD/picotool";
        echo $PICO_TOOLCHAIN_PATH
        cd picotool;
        git checkout 2.0.0;
        mkdir build;
        cd build;
        cmake ..;
        make;
        cd ../../

    - name: Setup-Build
      run: |
        ls;
        mkdir build;
        cd build;
        cmake ..;
        make
